// $Id: $
// File name:   i2c_slave.sv
// Created:     10/19/2014
// Author:      Shubham Agrawal
// Lab Section: 337-03
// Version:     1.0  Initial Design Entry
// Description: Top Level File
module i2c_slave (
  input wire clk, n_rst, scl, sda_in, write_enable,
  input wire [7:0] write_data,
  output sda_out, fifo_empty, fifo_full
);
  
  wire sync_scl;
  wire sync_sda_in;
  wire rising_edge_found, falling_edge_found;           //Output Signals for SCL_EDGE
  wire [7:0] starting_byte;                             //Output Signals for RX_SR
  wire rw_mode, address_match, stop_found, start_found; //Output Signals for DECODE
  wire byte_received, ack_prep, check_ack, ack_done;    //Output Signals for TIMER
  
  //Output Signals for CNTRL
  wire rx_enable, tx_enable, read_enable, load_data;
  wire [1:0] sda_mode;
  
  wire [7:0] tx_data;                                   //Output Signal for FIFO
  wire tx_out;                                          //Output Signal for TX_SR
  
  sync SYNC_SCL (
    .clk(clk),
    .n_rst(n_rst),
    .async_in(scl),
    .sync_out(sync_scl)
  );
  
  sync SYNC_SDA (
    .clk(clk),
    .n_rst(n_rst),
    .async_in(sda_in),
    .sync_out(sync_sda_in)
  );
  
  scl_edge SCL_EDGE (
    .clk(clk),
    .n_rst(n_rst),
    .scl(sync_scl),
    .rising_edge_found(rising_edge_found),
    .falling_edge_found(falling_edge_found)
  );
  
  rx_sr RX_SR (
    .clk(clk),
    .n_rst(n_rst),
    .sda_in(sync_sda_in),
    .rising_edge_found(rising_edge_found),
    .rx_enable(rx_enable),
    .rx_data(starting_byte)
  );
  
  decode DECODE (
    .clk(clk),
    .n_rst(n_rst),
    .scl(sync_scl),
    .sda_in(sync_sda_in),
    .starting_byte(starting_byte),
    .rw_mode(rw_mode),
    .address_match(address_match),
    .stop_found(stop_found),
    .start_found(start_found)
  );
  
  timer TIMER (
    .clk(clk),
    .n_rst(n_rst),
    .rising_edge_found(rising_edge_found),
    .falling_edge_found(falling_edge_found),
    .stop_found(stop_found),
    .start_found(start_found),
    .byte_received(byte_received),
    .ack_prep(ack_prep),
    .check_ack(check_ack),
    .ack_done(ack_done)
  );
  
  controller CNTRL (
    .clk(clk),
    .n_rst(n_rst),
    .stop_found(stop_found),
    .start_found(start_found),
    .byte_received(byte_received),
    .ack_prep(ack_prep),
    .check_ack(check_ack),
    .ack_done(ack_done),
    .rw_mode(rw_mode),
    .address_match(address_match),
    .sda_in(sync_sda_in),
    .rx_enable(rx_enable),
    .tx_enable(tx_enable),
    .read_enable(read_enable),
    .sda_mode(sda_mode),
    .load_data(load_data)
  );
  
  tx_fifo FIFO (
    .clk(clk),
    .n_rst(n_rst),
    .read_enable(read_enable),
    .read_data(tx_data),
    .fifo_empty(fifo_empty),
    .fifo_full(fifo_full),
    .write_enable(write_enable),
    .write_data(write_data)
  );
  
  tx_sr TX_SR (
    .clk(clk),
    .n_rst(n_rst),
    .tx_out(tx_out),
    .falling_edge_found(falling_edge_found),
    .tx_enable(tx_enable),
    .tx_data(tx_data),
    .load_data(load_data)
  );
  
  sda_sel SDA_SEL (
    .tx_out(tx_out),
    .sda_mode(sda_mode),
    .sda_out(sda_out)
  );
endmodule
