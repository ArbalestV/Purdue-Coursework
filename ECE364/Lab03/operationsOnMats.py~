#! /usr/bin/env python3.4
#
# $Author$:
# $Date$:
# $HeadURL$: 
import os
import math
import sys

def checkIfMatrixIsValid(matrix):
    num_lists = len(matrix)
    if type(matrix[0]) is not list:
        return True
    else:
        cmp = len(matrix[0])
        for i in range(0, num_lists):
            if len(matrix[i]) != cmp:
                return False
            else:
                cmp = len(matrix[i])
    #if reaches here, then return true
    return True
                
def getMatrixSize(matrix):
    ret_list = []
    if checkIfMatrixIsValid(matrix) == True:
        rowCount = len(matrix)
        colCount = len(matrix[0])
        ret_list = [rowCount, colCount]
        return ret_list
    else:
        return ret_list

def getRow(matrix, rowIndex):
    ret_list = []
    if checkIfMatrixIsValid(matrix) == False:
        return ret_list
    else:
        size = len(matrix)
        if rowIndex in range(0, size):
            ret_list = matrix[rowIndex]
            return ret_list
        else:
            return ret_list

def getColumn(matrix, columnIndex):
    ret_list = []
    if checkIfMatrixIsValid(matrix) == False:
        return ret_list
    else:
        size = len(matrix[0]) #size no of columns
        if columnIndex in range(0, size):
            for i in range(0, len(matrix)):
                ret_list[i] = matrix[i][columnIndex - 1]
            return ret_list
        else:
            return ret_list

def transposeMatrix(matrix):
    if checkIfMatrixIsValid(matrix) == False:
        return None
    else:
        transpose = []
        num_cols = len(matrix[0])
        for i in range(0, num_cols):
            transpose[i] = getColumn(matrix, i)
        return transpose

def dotProduct(row, column):
    if row <= 0 or col <= 0 or row != col:
        return None
    else:
        size = len(row)
        sum_of_prod = 0
        for i in range(0, size):
            sum_of_prod = sum_of_prod + (row[i] * column[i])
        return sum_of_prod

def multiplyMatrices(matrix1, matrix2):
    if checkIfMatrixIsValid(matrix1) == False or checkIfMatrixIsValid(matrix1) == False:
        return None
    elif len(matrix1) != len(matrix[0]):
        return None
    else:
        mul_mat = []
        for i in range(0, len(matrix1)):
            tmp = []
            for j in range(0, len(matrix[0])):
                 tmp.append(dotProduct(getRow(matrix1, i), getColumn(matrix2, j)))
            mul_mat.append(tmp)
        
        return mat_mul
        

if __name__ == "__main__":
    mat1 = [[3,2,1],[4,5],[3,1,]]
    c = checkIfMatrixIsValid(mat1)
    print c
    mat2 = [[9,1],[1,3],[3,1]]
    c = checkIfMatrixIsValid(mat2)
    print c
    mat3 = [[9,8,5,2]]
    c = checkIfMatrixIsValid(mat3)
    print c
