from practical1.py import *
from practical1 import *
getPhonePartialName()
getPhoneByPartialName()
getPhoneByPartialName("Clark")
exit()
from PySide import *
exit()
from PySide.QtCore import *
from PySide.QtGui import *
exit()
str = 'djdjdjd'
print(len(str))
print(str[7])
print(str[6])
exit()
string = 0.123
print(type(string))
string = '0.123'
str1 = float(string)
print(type(str1))
exit()
string = 1234567.56
fin = string.split('.')
string2 = str(string)
fin = string2.split('.')
print(fin)
decimal = fin[0]
print(decimal)
print(type(decimal))
l = len(decimal)
print(l)
for i in range[l:-1:0]:
print(l)
for i in range[l:-1:-1]:
print(decimal[i])
for i in range[l:-1:-1]:
   print(decimal[i])
...
for i in range[l:-1:-1]:
  print(decimal[i])
for i in range[l:-1:-1]:
  print(i)
for i in range[0:l]:
 print(i)
for i in range(l:-1:-1):
for i in range(0:1:l):
for i in range(0:l):
for i in range(l,-1,-1):
 print(decimal[i])
for i in range(l-1,-1,-1):
 print(decimal[i])
c = l-1
for i in range(l-1,-1,-1):
 if c > 0:
  c = c - 3
  print(',')
s = set()
s.add(1)
print(s)
s.add(3)
print(s)
c = l-1
>>> for i in range(l-1,-1,-1):
...  if c > 0:
...   c = c - 3
...   print(',')
c = l-1
for i in range(l-1,-1,-1):
c = l-1
s2 = set()
for i in range(l-1,-1,-1):
 if c > 0:
  c=c-3
  s2.add(c-1)
print(s2)
for i in range(l-1,-3,-1):
 s2.add(i-3)
print(s2)
s3 = set()
for i in range(l-1,-3,-1):
 print(i)
print(l)
sep = int((l-1)/3)
print(sep)
x = 9
sep2 = int((x-1)/3)
print(sep2)
print(decimal)
print(string2)
flt = string2.split('.')
print(flt)
point = flt[1]
print(point)
tmp = decimal
print(tmp)
tmp = ''
for i in range(l-1,-3,-1):
 tmp = tmp + ',' + decimal[i-2:i]
print(tmp)
for i in range(l-1,-1,-3):
 print(i)
tmp = ''
for i in range(l-1,-1,-3):
 if i>0:
  tmp = tmp + ',' + decimal[i-2:i+1]
 else:
  tmp = decimal[0] + tmp
print(tmp)
tmp = ''
for i in range(l-1,-1,-3):
 if i>0:
  tmp = ',' + decimal[i-2:i+1] + tmp
 else:
  tmp = decimal[0] + tmp
print(tmp)
exit()
states = ["AK", "AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY",
              "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
              "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
print(len(states)
)
print(states[3])
exit()
hsh = 'fkf'
print(type(hsh))
exit()
im - Image.open('nature.png')
im = Image.open('nature.png')
import PIL
im = Image.open('nature.png')
for PIL import Image
from PIL import Image
im = Image.open('nature.png')
width,height = im.size
print(width)
print(height)
print(im.size)
tot = width + ',' + height
tot = str(width) + ',' + str(height)
print(tot)
imgbytes = list(im.getdata())
print(imgbytes)
im2 = Image.open('sunflower.png')
imgbytes2 = list(im2.getdata())
print(imgbytes2)
print(imgbytes)
b64bytes = str(base64.b64encode(bytes(imgbytes)))[2:-1]
import base64
b64bytes = str(base64.b64encode(bytes(imgbytes)))[2:-1]
print(b64bytes)
b64bytes = str(base64.b64encode(bytes(imgbytes2[0])))[2:-1]
print(b64bytes)
print(len(imgbytes2))
print(len(imgbytes))
print(width*height)
b64bytes2 = str(base64.b64encode(bytes(imgbytes2)))[2:-1]
b64bytes = str(base64.b64encode(bytes(imgbytes[0])))[2:-1]
print(b64bytes)
b64bytes = str(base64.b64encode(bytes(imgbytes)))[2:-1]
print(b64bytes)
lst = []
lst = b64bytes
print(lst)
lst = []
lst2 = []
lst2 = str(base64.b64encode(bytes(imgbytes)))[2:-1]
print(lst2)
imgbytes = list(im.getdata())
print(imgbytes)
lst = []
lst = list(im.getdata())
print(lst)
lst3 = []
lst3 = list(im.getdata())
print(lst3)
lst3 = list(im2.getdata())
print(lst3)
red=[]
green=[]
blue=[]
for i in range(0,len(lst3)):
 red.append(lst[i][0])
 green.append(l
print(len(lst))
print(lst[1023999
])
print(lst3[1023999])
print(lst3[10])
for i in range(0,len(lst3)):
 print(str(i) + ': ' + lst3[i])
 print(str(i) + ': ' + str(lst3[i]))
for i in range(0, len(lst3)):
 print(str(i) + ': ' + str(lst3[i]))
print(len(lst3))
w,h=im2.size
print(w*h)
print(lst3[25599])
print(lst3[25600])
for i in range(0,len(lst3)):
print(lst3[25599][0])
print(lst3[25599][2])
for i in range(0, len(lst3)):
 red.append(lst3[i][0])
 green.append(lst3[i][1])
 blue.append(lst3[i][2])
print(red)
print(green)
print(blue)
print(lst3)
print(lst)
b64bytes = str(base64.b64encode(bytes(lst)))
print(b64bytes)
print(b64bytes[0])
print(b64bytes[1])
printb64bytes[len(b64bytes)-1]
print(b64bytes[len(b64bytes)-1])
print(red)
print(blue)
red_e = str(base64.b64encode(bytes(red)))
green_e = str(base64.b64encode(bytes(green)))
blue_e = str(base64.b64encode(bytes(blue)))
red_e = red_e[2:len(red_e)-1]
green_e = green_e[2:len(green_e)-1]
blue_e = blue_e[2:len(blue_e)-1]
print(red_e)
print(green_e)
print(blue_e)
print(red_e)
tot = red_e + green_e+blue_e
print(tot)
print(len(red_e))
print(len(green_e))
print(len(blue_e))
b64bytes = str(base64.b64encode(bytes(lst)))
print(lst)
b64bytes = str(base64.b64encode(bytes(lst)))
print(b64bytes)
b64bytes = b64bytes[2:len(b64bytes)-1]
print(b64bytes)
dgr = base64.b64decode(b64bytes)
print(dgr)
print(type(dgr))
print(len(dgr))
print(dgr[0])
print(dgr[1])
print(dgr[239])
im = Image.open('test.png','w')
im = open('test.png','w')
im = Image.open('nature.png')
print(im.size)
im2 = open('test.png','w')
im2 = Image.fromString("L", im.size, dgr)
im2 = Image.fromstring("L", im.size, dgr)
print(dgr)
print(im2)
gray = Image.frombytes('L',im.size,dgr)
graw.show()
gray.show()
im2 = open('test.png','w')
im2 = Image.frombytes("L", im.size, dgr)
im2.show()
print(type(im2))
im2.show()
im2.putdata(dgr)
im2 = open('test.png','w')
im2.putdata(dgr)
im2 = Image.open('test.png')
im2 = Image.frombytes('L',im.size,dgr)
im2.save('test.png')
print(b64bytes)
dgr = base64.b64decode(b64bytes)
print(dgr)
im2 = Image.frombytes('L',im.size,dgr)
im2.save('test.png')
print(width)
print(height)
string = tuple(width, height)
t = tuple()
t.add(height)
t = tuple(width, height)
t = (width, height)
print(t)
print(im.size)
im3 = Image.frombytes('L', t, dgr)
im3.save('thtt.png')
dim = str(width) + ',' + str(height)
print(dim)
w = dim.split(',')[0]
h = dim.split(','[1]
h = dim.split(',')[1]
print(w)
print(h)
tup = tuple
tuple = (w, h)
im3 = Image.frombytes('L', tup, dgr)
tup2 = tuple()
tup2 = tuple
tup2 = (int(w), int(h))
im3 = Image.frombytes('L', tup2, dgr)
im3.save('dkdkd.png')
print(red_e)
red_d = base64.b64decode(red_e)
print(red_d)
green_d = base64.b64decode(green_e)
blue_d = base64.b64decode(blue_e)
rd = list(bytes(red_d))
print(rd)
gd = list(bytes(green_d))
bd = list(bytes(blue_d))
print(gd)
print(bd)
 
tot_d = []
for i in range(0,len(rd)):
 tot_d.append((rd[i], gd[i], bd[i]))
image = Image.open('sunflower.png')
im4 = Image.new('RGB',image.size)
im4.putdata(tot_d)
im4.save('test.png')
print(bd)
print(rd)
print(gd)
image = Image.open('sunflower.png')
im4 = Image.new('RGB',image.size)
tot_d = []
green_d = base64.b64decode(green_e)
gd = list(bytes(green_d))
red_d = base64.b64decode(red_e)
rd = list(bytes(red_d))
blue_d = base64.b64decode(blue_e)
bd = list(bytes(blue_d))
for i in range(0,len(rd)):
 tot_d.append((rd[i], gd[i], bd[i]))
im4.putdata(tot_d)
im4.save('test_d.png')
exit()
from PIL import *
im = Image.open('nature.png')
from PIL import Image
im = Image.open('nature.png')
print(im.mode)
im2 = Image.open('sunflower.png')
print(im2.mode)
print(type(im2.mode))
im.size
w = im.size[0]
print(w)
print(type(w))
h = im.size[1]
print(type(h))
print(h)
maxSize = (width*height)/8
maxSize = (w*h)/8
print(maxSize)
maxSize = int((w*h)/8)
print(maxSize)
pixels = list(im.getdata())
print(pixels)
pixels2 = list(im2.getdata())
print(pixels2)
pixels_b = bytes(pixels)
print(pixels_b)
tmp = pixels[0]
print(tmp)
tmp = pixels[345]
print(tmp)
print(pixels)
tmp = pixels[38484]
print(pixels)
print(tmp)
from BitVector import *
import BitVector
from BitVector import bv
print(im.size)
print(type(pixels(2))
)
print(pixels[2])
print(type(pixels[2]))
print(list(im.getdata())
)
pix = im.load()
print(pix)
all_pixels = []
for i in range(w):
 for j in range(h):
  cpixel = pix[i, j]
  all_pixels.append(cpixel)
print(all_pixels)
print(len(all_pixels))
print(len(pixels))
print(pixels)
print(all_pixels)
all_pixels_2 = []
for i in range(h):
 for j in range(w):
  cpixel = pixels[j][i]
  all_pixels.append(cpixel)
  all_pixels_2.append(cpixel)
print(all_pixels)
print(all_pixels[0] == pixels[0])
print(all_pixels[len(pixels)-1] == pixels[len(pixels)-1])
print(all_pixels[len(pixels)-373] == pixels[len(pixels)-373])
print(len(pixels) == len(all_pixels))
all_pixels_2 = []
for i in range(h):
 for j in range(w):
  cpix = pix[j, i]
  all_pixels_2.append(cpix)
print(all_pixels_2)
print(all_pixels_2[8383] == pixels[8383])
print(all_pixels_2[83282] == pixels[83282])
print(len(all_pixels_2) == len(pixels))
for i in range(0, len(pixels)): 
 if pixels[i] != all_pixels_2[i]:
  print('False')
for i in range(0, len(pixels)):
 if pixels[i] != all_pixels_2[i]:
  print('false')
 else:
  print('True')
print(all_pixels_2[773] == all_pixels[773])
print(type(all_pixels[34543])
)
f = open('full.xml','r')
tmp = r.read()
tmp = f.read()
f.close()
print(tmp)
encoded = tmp.encode('utf-8')
print(encoded)
f = open('full.xml','r')
tmp =f.read()
f.close()
print(tmp)
msgb = 'b\'' + tmp + '\''
print(msgb)
msg_bytes = list(bytes(msgb, 'utf-8'))[2:-1]
print(msg_bytes)
msg_bytes = list(bytearray(msgb, 'utf-8'))[2:-1]
print(msg_bytes)
msg_bytes2 = list(bytearray(msgb, 'utf-8'))[2:-1]
print(len(msg_bytes)==len(msg_bytes))
print(type(msg_bytes[2])
)
bv = BitVector(intVal = msg_bytes[0], size = 8)
print(all_pixels)
lst = [3,4,5,6]
lst=lst[2:-1]
print(lst)
lst = [3,4,5,6]
lst2=lst[3:-1]
print(lst2)
lst2=lst[2:-2]
print(lst2)
lst2=lst[1:-2]
print(lst2)
lst2=lst[1:3]
print(lst2)
exit()
lst = [[]]
lst[0][0] = 1
mat = [[0 for x in range(1280) for x in range(800)]
]
print(mat)
print(mat[0][799])
print(mat[1279][799])
print(mat[799][1279])
print(len(mat[0])
)
print(len(mat[8])
)
import numpy
numpy.zeroes(1280,800)
numpy.zeroes((1280,800))
mat = [[0]*5 for i in range(4)]
print(mat)
mat = [[0]*4 for i in range(5)]
print(mat)
mat[2][3]
mat[2][3] = 7
print(mat)
mat = [[0]*5 for i in range(4)]
print(mat)
print(len(mat))
print(len(mat[3]))
a = 3
b = 7
mat = [[0]*a for i in range(b)]
print(mat)
exit()
bin(109)
b = bin(109)
b = b[2:0].rjust(8,'0')
print(b)
b = bin(109)
b = b[2:0]
print(b)
b = bin(109)
print(b)
print(type(b))
b[2:]
b = b[2:].rjust(8,'0')
print(b)
ord(b)
ord('a')
import BitVector
from PIL import Image
st = '<?xml version="1.0" encoding="UTF-8"?>
st = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'
print(st)
print(len(st))
st2 = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n'
print(st2)
print(len(st2))
bv = BitVector(textstring == st2)
bv = BitVector(textstring = st2)
from BitVector import *
bv = BitVector(textstring = st2)
print(bv)
print(len(bv))
print(len(bv) == (39*8))
im = Image.open('mona_small_h.png')
pix = list(im.getdata())
bv_s = ''
print(pix[311])
for i in range(0, 311):
 s = bin(pix[i])[2:].rjust(8, '0')[7]
 bv_s = bv_s + s
print(len(bv_s))
bv_s = bv_s + bin(pix[311])[2:].rjust(8, '0')[7]
print(len(bv_s))
bv_f = BitVector(bitstring = bv_s)
print(bv_f == bv)
test = bv_f.get_text_from_bitvector()
print(test)
comp_bv = ''
for i in range(432,440):
 comp_bv = comp_bv + bin(pix[i])[2:].rjust(8, '0')[7]
print(cop_bv)
print(comp_bv)
bv_comp = BitVector(bitstring = comp_bv)
print(bv_comp)
c = bv_comp.get_text_from_bitvector()
print(c)
im2 = Image.open('mona_small_v.png')
pixels = im2.load()
pix2 = []
w,h = im2.size
for i in range(w):
 for j in range(h):
  p = pixels[i,j]
  pix2.append(p)
print(len(p))
print(len(pix2))
print(st1)
print(st)
print(st2)
st4 = ''
for i in range(0, 312):
 s = bin(pix2[i])[2:].rjust(8, '0')[7]
 st4 = st4 + s
print(len(st4))
print(st4==bv)
bv_f2 = BitVector(bitstring = st4)
print(bv_f2==bv)
t2 = bv_f2.get_text_from_bitvector()
print(t2)
st5 = ''
for i in range(432,440):
 st5 = st5 + bin(pix2[i])[2:].rjust(8, '0')[7]
bv_comp2 = BitVector(bitstring = st5)
t4 = bv_comp2.get_text_from_bitvector()
print(t4)
t = ('a', 3)
b = t
print(b)
exit
exit()
