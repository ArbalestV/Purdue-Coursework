#----------------------------------------------------------
# First Processor
#----------------------------------------------------------
	org 0x0000
	ori   $sp, $zero, 0x3ffc  # stack
	jal   mainp0              # go to program
	halt	

# pass in an address to lock function in argument register 0
# returns when lock is available
lock:
aquire:
  ll    $t0, 0($a0)         # load lock location
  bne   $t0, $0, aquire     # wait on lock to be open
  addiu $t0, $t0, 1
  sc    $t0, 0($a0)
  beq   $t0, $0, lock       # if sc failed retry
  jr    $ra


# pass in an address to unlock function in argument register 0
# returns when lock is free
unlock:
  sw    $0, 0($a0)
  jr    $ra


#main function for the producer code
mainp0:
	push $ra	#save return address
	ori $t6, $zero, 256 	#to check if the first element is added
	ori $t8, $zero, 256	#save the total number of times,i.e the counter
	ori $t9, $zero, 4136 	#when head has reached 10 elements. 1000+4*10 = 1040 in hex 
add_h:	beq $t8, $zero, fin #if 256 elements are added
	bne $t8, $t6, after1	#from second element onwards
for1:	ori $a0, $zero, 0x0030 #0x30 is the seed
	jal crc32 #call the crc32 to generate the first random number
	#$v0 will contain the result of crc32
	ori $a0, $zero, lock_head	#move lock to argument register
	jal lock	#try to acquire lock
	#critical code segment
	ori $t5, $zero, head #whatever is the value of head, say 0xff88
	lw $t5, 0($t5)	#whichever location head points	to, the data there, store into reg 5, #R[5] = 0x1000 = Mem[0xff88]
	sw $v0, 0($t5) #store the crc output in head's memory address, Mem[0x1000] = crc value, say 30
	#now we will add the value of head by 4
	ori $t5, $zero, head	#R[5] = 0xff88 for eg
	lw $t0, 0($t5) 		#R[0] = 0x1000
	addi $t0, $t0, 4	#R[0] = 0x1004
	sw $t0, 0($t5)		#Mem[0xff88] = 0x1004, now head's address stores the value 1004
	# critical code segment
	ori $a0, $zero, lock_head	#a0 will now store ff88, which in turn points to the value 0x1004
	jal unlock		#release the lock
	
	#now the first store has been done, we can decrease the counter by 1
	addi $t8, $t8, -1 #decrease the count value by 1, t8 will now be 255
	j add_h #jump back to the add label to add subsequent elements
after1:	#this is where the additions from the 2nd element onwards would occur
	#now we have to check if the head's value is 4140 in decimal, or 0x102c. If it is, then 10 elements have been added and head's value should be 0x1000, or 4096 in dec.
	#ori $t5, $zero, head
	#lw $t5, 0($t5)
	#beq $t5, $t9, head0
cont:	#we will call the crc function on the previous value of head
	ori $t5, $zero, head
	lw $t0, 0($t5)
	ori $t4, $zero, 0x1000
	beq $t0, $t4, change
	addi $t0, $t0, -4
exec:	lw $a0, 0($t0) 	#store the previous value in $a0
	jal crc32	#call the crc32 to generate the next random number
	#v0 will contain the result of crc32
	ori $a0, $zero, lock_head	#move lock to argument register
	jal lock	#try to acquire lock
	#critical code segment
	ori $t5, $zero, head #whatever is the value of head, say 0xff88
	lw $t5, 0($t5)	#whichever location head points	to, the data there, store into reg 5, #R[5] = 0x1000 = Mem[0xff88]
	sw $v0, 0($t5) #store the crc output in head's memory address, Mem[0x1000] = crc value, say 30
	#critical code segment
	ori $a0, $zero, lock_head
	jal unlock
	ori $t5, $zero, head
	lw $t5, 0($t5)
	addi $t5, $t5, 4
	beq $t5, $t9, head0

hdtl:	#now check if $t5 value is equal to tail's value
	ori $t7, $zero, tail
	lw $t7, 0($t7)
loop1:	bne $t5, $t7, incr_h
	j hdtl
head0:	#this is where the head is made as 1000 before writing to that location
	ori $t5, $zero, 0x1000
	j hdtl #continue with the addition of new elements into the queue
incr_h:	#now we will assign $t5 value to head
	ori $a0, $zero, lock_head
	jal lock
	#critical code segment
	ori $t0, $zero, head 	#R[$t0] = 0xff88
	sw $t5, 0($t0)
	#critical code segment end
	ori $a0, $zero, lock_head
	jal unlock
	j add_h # go back to adding the next one
change:	ori $t0, $zero, 0x1024
	j exec
fin:	pop $ra
	jr $ra

#----------------------------------------------------------
# Second Processor
#----------------------------------------------------------
  org   0x0200               # second processor p1
  ori   $sp, $zero, 0x7ffc  # stack
  jal   mainp1              # go to program
  halt

# main function for the consumer code
mainp1:	
	#Start of P1 instructions
	push $ra
	ori $t7, $zero, 0	#the average value
	ori $t8, $zero, 256	#save the total number of times,i.e the counter
	ori $t5, $zero, 0xFFFF	#the min value
	ori $t6, $zero, 0x0000	#the max value
	ori $t9, $zero, 4136 	#when tail has reached 10 elements. 1000+4*10 = 1040 in hex
	
	#first check if 256 elements have been removed
remove:	beq $t8, $zero, fin_t
	addi $t8, $t8, -1 #decrement the counter value by one
	#first check if the queue is empty
checkEmpty:	
	ori $t1, $zero, tail
	lw $t1, 0($t1)
	ori $t2, $zero, head
	lw $t2, 0($t2)
	beq $t1, $t2, checkEmpty #if (t == h) then the queue is empty

	#queue is not empty now, so load from tail
	lw $t3, 0($t1)
	#increment tail by 4
incr_t:	#now we will assign $t1 value to tail
	ori $a0, $zero,lock_tail
	jal lock
	#critical code segment
	ori $t0, $zero, tail 	#R[$t0] = 0xff88
	lw $t0, 0($t0)
	addi $t0, $t0, 4
	beq $t0, $t9, tail0
	ori $t1, $zero, tail
new_t:	sw $t0, 0($t1)
	#critical code segment end
	ori $a0, $zero, lock_tail
	jal unlock
	j eval
tail0:	ori $t0, $zero, 1000
	j new_t

eval:	andi $t3, $t3, 0xffff
	add $t7, $t7, $t3 #add the newly loaded value to $t7, for finally dividing by 256
	ori $a0, $t3, 0
	#ori $t4, $a0, 0xffff
	#and $a0, $a0, $t4
	andi $a0, $a0, 0xffff
	ori $a1, $t5, 0
	#ori $t4, $a1, 0xffff
	#and $a1, $a1, $t4
	andi $a1, $a1, 0xffff
	jal min
	ori $t5, $v0, 0 	#get the min value
	ori $a1, $t6, 0
	#ori $t4, $a1, 0xffff
	#and $a1, $a1, $t4
	andi $a1, $a1, 0xffff
	jal max
	ori $t6, $v0, 0		#get the max value
	j remove

fin_t:	ori $a0, $t7, 0
	ori $a1, $zero, 256
	jal divide #$v0 = average numerator, $v1 = average remainder
	pop $ra
	jr $ra
	

	

# registers a0-1,v0-1,t0
# a0 = Numerator
# a1 = Denominator
# v0 = Quotient
# v1 = Remainder

#-divide(N=$a0,D=$a1) returns (Q=$v0,R=$v1)--------
divide:               # setup frame
  push  $ra           # saved return address
  push  $a0           # saved register
  push  $a1           # saved register
  or    $v0, $0, $0   # Quotient v0=0
  or    $v1, $0, $a0  # Remainder t2=N=a0
  beq   $0, $a1, divrtn # test zero D
  slt   $t0, $a1, $0  # test neg D
  bne   $t0, $0, divdneg
  slt   $t0, $a0, $0  # test neg N
  bne   $t0, $0, divnneg
divloop:
  slt   $t0, $v1, $a1 # while R >= D
  bne   $t0, $0, divrtn
  addiu $v0, $v0, 1   # Q = Q + 1
  subu  $v1, $v1, $a1 # R = R - D
  j     divloop
divnneg:
  subu  $a0, $0, $a0  # negate N
  jal   divide        # call divide
  subu  $v0, $0, $v0  # negate Q
  beq   $v1, $0, divrtn
  addiu $v0, $v0, -1  # return -Q-1
  j     divrtn
divdneg:
  subu  $a0, $0, $a1  # negate D
  jal   divide        # call divide
  subu  $v0, $0, $v0  # negate Q
divrtn:
  pop $a1
  pop $a0
  pop $ra
  jr  $ra
#-divide-------------------------------------------	

# registers a0-1,v0,t0
# a0 = a
# a1 = b
# v0 = result

#-max (a0=a,a1=b) returns v0=max(a,b)--------------
max:
  push  $ra
  push  $a0
  push  $a1
  or    $v0, $0, $a0
  slt   $t0, $a0, $a1
  beq   $t0, $0, maxrtn
  or    $v0, $0, $a1
maxrtn:
  pop   $a1
  pop   $a0
  pop   $ra
  jr    $ra
#--------------------------------------------------

#-min (a0=a,a1=b) returns v0=min(a,b)--------------
min:
  push  $ra
  push  $a0
  push  $a1
  or    $v0, $0, $a0
  slt   $t0, $a1, $a0
  beq   $t0, $0, minrtn
  or    $v0, $0, $a1
minrtn:
  pop   $a1
  pop   $a0
  pop   $ra
  jr    $ra
#-------------------------------------------------

#REGISTERS
#at $1 at
#v $2-3 function returns
#a $4-7 function args
#t $8-15 temps
#s $16-23 saved temps (callee preserved)
#t $24-25 temps
#k $26-27 kernel
#gp $28 gp (callee preserved)
#sp $29 sp (callee preserved)
#fp $30 fp (callee preserved)
#ra $31 return address

# USAGE random0 = crc(seed), random1 = crc(random0)
#       randomN = crc(randomN-1)
#------------------------------------------------------
# $v0 = crc32($a0)
crc32:
  lui $t1, 0x04C1
  ori $t1, $t1, 0x1DB7
  or $t2, $0, $0
  ori $t3, $0, 32

l1:
  slt $t4, $t2, $t3
  beq $t4, $zero, l2

  srl $t4, $a0, 31
  sll $a0, $a0, 1
  beq $t4, $0, l3
  xor $a0, $a0, $t1
l3:
  addiu $t2, $t2, 1
  j l1
l2:
  or $v0, $a0, $0
  jr $ra
#------------------------------------------------------


	

head:
	cfw 0x1000
lock_head:
	cfw 0x0000
tail:
	cfw 0x1000
lock_tail:
	cfw 0x0000

