#include "usertraps.h"
#include "misc.h"
#include "os/memory_constants.h"
//accessing memory inside virtual address, but outside of allocated pages
void main (int argc, char *argv[])
{
  sem_t s_procs_completed; // Semaphore to signal the original process that we're done
  int * check_address;

  if (argc != 2) { 
    Printf("Usage: %s <handle_to_procs_completed_semaphore>\n"); 
    Exit();
  }
  
  // Convert the command-line strings into integers for use as handles
  s_procs_completed = dstrtol(argv[1], NULL, 10);
  
  Printf("\nThe Test Program 3 - accessing memory inside virtual address, but outside of allocated pages..");

  // Signal the semaphore to tell the original process that we're done 
  if(sem_signal(s_procs_completed) != SYNC_SUCCESS) {
    Printf("hello_world (%d): Bad semaphore s_procs_completed (%d)!\n", getpid(), s_procs_completed);
    Exit();
  }

  //check_address = (int *) ((MEM_MAX_VIRTUAL_ADDRESS - (2 * MEM_PAGESIZE)) - 16); //arbitrary
  check_address = (int *) (145 * MEM_PAGESIZE);
  
  Printf("\nMaximum Virtual Address that can be accessed: %d\n",  MEM_MAX_VIRTUAL_ADDRESS);
  Printf("\nMEM_PAGESIZE = %d\n", MEM_PAGESIZE);
  Printf("\nAccessing within bounds Memory Location in decimal representation : %d \n", check_address);
  *check_address = 0xABCD1100;

  Printf("\nEnd of The Test Program 3 - accessing memory inside virtual address, but outside of allocated pages..");
}
  
