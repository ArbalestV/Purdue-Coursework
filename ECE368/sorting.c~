#include <stdlib.h>
#include <stdio.h>
#include <string.h>
//#include <process.h>

int power(int num, int n)
{
 int res = 1;
 if (n == 1)
   {
     return num;
   }
 if (n == 0)
   {
     return 1;
   }
 int i;
 for(i = 1; i <= n; i++)
   {
     res *= num;
   }
 return res;
}

long *Load_File(char *Filename, int *Size)
{
  FILE * fp = fopen(Filename, "r");
  if (fp == NULL)
    {
      return NULL;
    }
  long val;
  long num = 0; 
  long first = fscanf(fp, "%ld", &val);
  while(fscanf(fp, "%ld", &val) == 1) //when number of integers read equals 1
    {
      num++; //increment number of integers variable "num"
    }
  *Size = num;
  fseek(fp, 0, SEEK_SET);
  long * array = malloc(sizeof(long) * num); 
  long first_sec = fscanf(fp, "%ld", &val);
  int i; //loop control variable for following for loop
  for (i = 0; i < num; i++)
    {
      fscanf(fp, "%ld", &array[i]);
    }
  fclose(fp);
  return array;
}

int Save_File(char *Filename, long *Array, int Size)
{
  FILE * fp = fopen(Filename, "w");
  if (fp == NULL)
    {
      return EXIT_FAILURE;
    }
  int i, success = 0;
  for (i = 0; i < Size; i++)
    {
      fprintf(fp, "%ld", Array[i]);
      success++;
    }
  return success;
}

int largest_index(int num, int size)
{
  int q = 0;
  while (power(num, q) <= size)
    {
      q++;
    }
  q--;
  return q;
}

void array_create(int q, int * k)
{
  int n, i, j, p = 0;
  for (n = 0; n <= q; n++)
    {
      for (i = n; i >= 0; i--)
	{
	  for (j = 0; j <= n; j++)
	    {
	      k[p] = power(2, i) * power(3, j);
	    }
	}
    }
}



void Shell_Insertion_Sort(long *Array, int Size, double *N_Comp, double *N_move)
{
  int q = largest_index(3, Size);
  int number = ((q + 1) * (q + 2)) / 2;
  int * k = malloc(sizeof(int) * number);
  array_create(q, k);
  long i, j, l;
  long temp_r;
  *N_Comp = 0;
  *N_move = 0;
  for (i = number - 1; i >= 0; i--)
    {
      for (j = k[i]; j < Size; j++)
	{
	  temp_r = Array[j];
	  l = j;
	  while (l >= k[i] && Array[l - k[i]] > temp_r)
	    {
	      *N_Comp = *N_Comp + 2;
	      Array[l] = Array[l - k[i]];
	      *N_move += 1.0 ;
	      l = l - k[i];
	    }
	  *N_Comp = *N_Comp + 2;
	  Array[l] = temp_r;
	  *N_move += 1.0;
	}
    }
  free(k);
}

void Shell_Selection_Sort(long *Array, int Size, double *N_Comp, double *N_move)
{
  int q = largest_index(3, Size);
  int number = ((q + 1) * (q + 2)) / 2;
  int * k = malloc(sizeof(int) * number);
  array_create(q, k);
  long i, j, l;
  long min;
  long temp;
  *N_Comp = 0;
  *N_move = 0;
  for (i = number - 1; i >= 0; i--)
    {
      for (j = 0; j < Size - k[i]; j++)
	{
	  min = Array[j];
	  for (l = j + k[i]; l < Size; l = l + k[i])
	    {
	      if (Array[l] < Array[j])
		{
		  N_Comp = N_Comp + 1;
		  min = l;
		}
	    }
	  if (min != j)
	    {
	      temp = Array[j];
	      Array[j] = Array[min];
	      Array[min] = temp;
	      *N_move = *N_move + 3.0;
	    }
	}
    }
  free(k);
}

int Print_Seq(char *Filename, int Size)
{
  FILE * fp = fopen(Filename, "w");
  if (fp == NULL)
    {
      return EXIT_FAILURE;
    }
  int q = largest_index(3, Size);
  int number = ((q + 1) * (q + 2)) / 2;
  int * k = malloc(sizeof(int) * number);
  array_create(q, k);
  int i;
  fprintf(fp, "%d", number);
  for (i = 0; i < number; i++)
    {
      fprintf(fp, "%d", k[i]);
    }
  free(k);
  fclose(fp);
}
